from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
import urllib.parse
import time
import threading
from http.server import BaseHTTPRequestHandler, HTTPServer
import asyncio

BOT_TOKEN = "7885828113:AAEx4T2WTh3B0ondFCAsOn5vmoXnLPcST-g"  # –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather

# HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render, —á—Ç–æ–±—ã —Å–µ—Å—Å–∏—è –Ω–µ –ø–∞–¥–∞–ª–∞
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"OK")

def run_dummy_server():
    server = HTTPServer(("0.0.0.0", 10000), DummyHandler)
    server.serve_forever()

# –ö–æ–º–∞–Ω–¥—ã Telegram-–±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"[start] –û—Ç {update.effective_user.username}")
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –∫–æ—Ç–æ–±–æ—Ç üê±\n/cat ‚Äî —Å–ª—É—á–∞–π–Ω—ã–π –∫–æ—Ç\n/cat –ü—Ä–∏–≤–µ—Ç ‚Äî –∫–æ—Ç —Å –ø–æ–¥–ø–∏—Å—å—é")

async def send_cat(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        timestamp = int(time.time())
        if context.args:
            text = urllib.parse.quote(" ".join(context.args))
            cat_url = f"https://cataas.com/cat/says/{text}?size=50&timestamp={timestamp}"
        else:
            cat_url = f"https://cataas.com/cat?timestamp={timestamp}"
        print(f"[cat] –û—Ç–ø—Ä–∞–≤–∫–∞: {cat_url}")
        await update.message.reply_photo(cat_url)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ—Ç–∞:", e)
        await update.message.reply_text("üòø –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏–∫–∞...")

async def log_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f"[log] –°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")

# –ü—É–ª—å—Å –±–æ—Ç–∞
async def heartbeat():
    while True:
        print("[pulse] –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω:", time.strftime("%Y-%m-%d %H:%M:%S"))
        await asyncio.sleep(30)

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–µ–π–∫–æ–≤—ã–π —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_dummy_server, daemon=True).start()

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cat", send_cat))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, log_all))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–ª—å—Å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å polling
    asyncio.create_task(heartbeat())
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
